{"version":3,"file":"static/js/145.05d63edb.chunk.js","mappings":"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","sources":["Redux/User/Actions/contentActions.js","components/layouts/UserDashboardLayout.jsx","components/videoCard/VideoInput.jsx","pages/UploadVideosSecreen.jsx"],"sourcesContent":["import axios from 'axios'\nimport {\n    CHOOSE_MOVIE_FAIL,\n    CHOOSE_MOVIE_REQUEST,\n    CHOOSE_MOVIE_SUCCESS,\n\n    REMOVE_MOVIE_REQUEST,\n    REMOVE_MOVIE_SUCCESS,\n    REMOVE_MOVIE_FAIL,\n    CREATE_CONTENT_REQUEST,\n    CREATE_CONTENT_SUCCESS,\n    CREATE_CONTENT_FAIL,\n    GET_ALL_CONTENT_REQUEST,\n    GET_ALL_CONTENT_SUCCESS,\n    GET_ALL_CONTENT_FAIL,\n    LIKE_VIDEO_SUCCESS,\n    LIKE_VIDEO_REQUEST,\n    LIKE_VIDEO_FAIL,\n    SINGLE_CONTENT_REQUEST,\n    SINGLE_CONTENT_SUCCESS,\n    SINGLE_CONTENT_FAIL,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAIL,\n    GET_POPULAR_REVIEWS_REQUEST,\n    GET_POPULAR_REVIEWS_SUCCESS,\n    GET_POPULAR_REVIEWS_FAIL,\n    GET_SUGGEST_REVIEWS_REQUEST,\n    GET_SUGGEST_REVEIWS_SUCCESS,\n    GET_SUGGEST_REVIEWS_FAIL,\n    GET_CHANNEL_DETAILS_REQUEST,\n    GET_CHANNEL_DETAILS_SUCCESS,\n    GET_CHANNEL_DETAILS_FAIL,\n} from \"../Constants/contentContansts\"\n\nexport const selectMovie = (movieDetails) => async (dispatch) => {\n    try {\n        dispatch({ type: CHOOSE_MOVIE_REQUEST })\n        // console.log(movieDetails);\n        dispatch({ type: CHOOSE_MOVIE_SUCCESS, payload: movieDetails })\n\n    } catch (error) {\n        dispatch({\n            type: CHOOSE_MOVIE_FAIL,\n            payload: error\n        })\n\n    }\n\n}\n\nexport const removeMovie = () => async (dispatch) => {\n    try {\n        dispatch({ type: REMOVE_MOVIE_REQUEST })\n\n        dispatch({ type: REMOVE_MOVIE_SUCCESS })\n\n    } catch (error) {\n        dispatch({\n            type: REMOVE_MOVIE_FAIL,\n            payload: error\n        })\n\n    }\n\n}\n\nexport const createContent = (contentDetails) => async (dispatch) => {\n    try {\n        dispatch({ type: CREATE_CONTENT_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': \"multipart/form-data\"\n            }\n        }\n        const { data } = await axios.post('/api/content/create', contentDetails, config)\n\n        dispatch({ type: CREATE_CONTENT_SUCCESS, payload: data.success })\n\n    } catch (error) {\n\n        dispatch({ type: CREATE_CONTENT_FAIL, payload: error.response.data.error })\n\n    }\n}\n\nexport const getAllContents = () => async (dispatch) => {\n    try {\n        dispatch({ type: GET_ALL_CONTENT_REQUEST })\n\n        const config = {\n            headers: {\n                'Content-Type': \"application/json\"\n            }\n        }\n        const { data } = await axios.get('/api/content/get-all-content', config)\n\n        dispatch({ type: GET_ALL_CONTENT_SUCCESS, payload: data })\n\n    } catch (error) {\n        dispatch({ type: GET_ALL_CONTENT_FAIL, payload: error.response.data.error })\n    }\n}\n\nexport const likeAndDislikeContents = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: LIKE_VIDEO_REQUEST })\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.patch(`/api/content/single-content/${id}`, config)\n        dispatch({ type: LIKE_VIDEO_SUCCESS, payload: data })\n\n    } catch (error) {\n        dispatch({\n            type: LIKE_VIDEO_FAIL,\n            payload: error.response.data.error\n        })\n    }\n}\n\nexport const getSingleContent = (contentId) => async (dispatch) => {\n    try {\n        dispatch({ type: SINGLE_CONTENT_REQUEST })\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.post(`/api/content/single-content/${contentId}`, config)\n\n        dispatch({ type: SINGLE_CONTENT_SUCCESS, payload: data.content })\n\n    } catch (error) {\n\n        dispatch({ type: SINGLE_CONTENT_FAIL, payload: error.response.data.error })\n    }\n}\n\nexport const addComment = (id, comment) => async (dispatch) => {\n    try {\n        dispatch({ type: ADD_COMMENT_REQUEST })\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.patch(`/api/content/comment/${id}`, { comment }, config)\n\n        dispatch({ type: ADD_COMMENT_SUCCESS, payload: data })\n\n    } catch (error) {\n        dispatch({ type: ADD_COMMENT_FAIL, payload: error.response.data.error })\n    }\n}\n\nexport const getPopularContents = (movieId, contentId) => async (dispatch) => {\n    try {\n        dispatch({ type: GET_POPULAR_REVIEWS_REQUEST })\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.post(`/api/content/get-popular-contents/${movieId}`, { contentId }, config)\n        dispatch({ type: GET_POPULAR_REVIEWS_SUCCESS, payload: data })\n\n    } catch (error) {\n        dispatch({ type: GET_POPULAR_REVIEWS_FAIL, payload: error.response.data.error })\n    }\n}\n\nexport const getSuggestedContents = () => async (dispatch) => {\n    try {\n        dispatch({ type: GET_SUGGEST_REVIEWS_REQUEST })\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.get('/api/content/get-suggested-contents')\n        dispatch({ type: GET_SUGGEST_REVEIWS_SUCCESS, payload: data.contents })\n\n    } catch (error) {\n        dispatch({ type: GET_SUGGEST_REVIEWS_FAIL, payload: error.response.data.error })\n    }\n}\n\nexport const getChannelDetails = (channelId) => async (dispatch) => {\n    try {\n        dispatch({ type: GET_CHANNEL_DETAILS_REQUEST })\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        const { data } = await axios.post(`/api/content/channel/${channelId}`, config)\n\n        dispatch({ type: GET_CHANNEL_DETAILS_SUCCESS,payload:data.channel  })\n\n    } catch (error) {\n\n        dispatch({ type: GET_CHANNEL_DETAILS_FAIL, payload: error.response.data.error })\n    }\n\n}\n\n\n","import React, { useEffect, useState } from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\n\nimport './layout.css'\nimport Header from '../header/Header'\nimport { Link } from 'react-router-dom'\nimport Footer from '../footer/Footer'\nimport { CHANNER_BANNER, USER_AVATAR } from '../../assets/icons'\nimport Sidebar from '../sidebar/Sidebar'\n\nfunction UserDashboardLayout({ children }) {\n    const [edit, setEdit] = useState(false);\n    const [user, setUser] = useState(null)\n    const [channel, setChannel] = useState({ banner: \"\", avatar: \"\", channel_name: \"\" })\n\n    useEffect(() => {\n        let userData = localStorage.getItem(\"userData\")\n        if (userData) {\n            userData = JSON.parse(userData)\n            setUser(userData)\n            if(userData.channel && userData.banner){\n                setChannel({...channel,banner:userData.banner.url,channel_name:userData.channel})\n            }\n        }\n\n\n    }, [])\n\n    const handleClick = (value) => {\n        if (value === \"name\") {\n            setEdit(!edit)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n    }\n\n    return (\n        <div>\n            <Header />\n            <Container className='common-dashboard-container  ' >\n\n                <Row className='mt-5'>\n                    <Col lg={12}>\n\n                        <div className=\"user-dashboard-banner mt-3  pt-5 d-none d-sm-none d-lg-block \">\n                           {user ? <img className='banner-image position-absolute rounded-3 ' src={user.banner ? user.banner.url : CHANNER_BANNER}  alt=\"\" /> : <img className='banner-image position-absolute rounded-3 ' src={CHANNER_BANNER}  alt=\"\" /> } \n                           {user ? <img className='profile-image position-relative' src={user.avatar ? user.avatar.url : USER_AVATAR} alt=\"\" /> : <img className='profile-image position-relative ' src={ USER_AVATAR} alt=\"\" /> } \n                        </div>\n\n                    </Col>\n                    <div className=\"col-12 d-lg-none  d-col-block d-md-none d-sm-none \">\n                        <div className=\" mt-3  pt-5  text-center\">\n                        {user ? <img className='banner-image mb-2 ' width={\"100%\"} src={user.banner ? user.banner.url : CHANNER_BANNER}  alt=\"\" /> : <img className='banner-image  ' src={CHANNER_BANNER}  alt=\"\" /> } \n                        {user ? <img className='profile-image ' style={{borderRadius:\"50%\"}} src={user.avatar ? user.avatar.url : USER_AVATAR} alt=\"\" /> : <img className='profile-image  ' src={ USER_AVATAR} alt=\"\" /> } \n                        </div>\n                    </div>\n                    <Col lg={9} className=\" d-flex justify-content-between my-4  ms-auto\">\n                        <div className=\"Channel-title text-white text-capitalize\">\n\n                            {edit ?\n                                <form className=\"input-tag\" onSubmit={handleSubmit}>\n                                    <input type=\"text\" className=' text-capitalize h3 ' placeholder={user.channel} value={user.channel} onChange={((e) => setChannel({ ...channel, channel_name: e.target.value }))} autoFocus />\n                                    <input type=\"submit\" className='my-auto border rounded px-2' value='save' />\n                                </form>\n                                :\n                                <div className='input-tag d-flex mt-4'>\n                                    <h3>{user && user.channel}</h3>\n                                    <span className='my-auto mx-5 ' onClick={(() => handleClick(\"name\"))}><ion-icon name=\"create-outline\"></ion-icon></span>\n                                </div>}\n                                <p className='text-muted mx-2'>{user?.name}</p>\n                        </div>\n                        <div className=\"navigate-to-dashboard text-uppercase mt-5   me-5\">\n                            <Link to={'/content/upload/video'} className=\"navigate-to-dashboard-link  px-4 py-2 \">\n\n                                <span> upload videos</span><i></i>\n                            </Link>\n                        </div>\n                    </Col>\n                </Row>\n\n            </Container>\n            <Container fluid className='px-5'>\n                <Row>\n                    <Col lg={3} className=\"\" >\n                        <Sidebar admin />\n                    </Col>\n                    <Col lg={9}>\n                        {children}\n                    </Col>\n                </Row>\n            </Container>\n            <Footer />\n        </div>\n    )\n}\n\nexport default UserDashboardLayout","import axios from 'axios';\nimport React from 'react';\n\nexport default class Upload extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null\n        };\n    }\n    onChangeHandler = (event) => {\n        this.setState({\n            selectedFile: event.target.files[0],\n            loaded: 0,\n        });\n        console.log(event.target.files[0]);\n\n\n    };\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const formData = new FormData();\n        const { selectedFile } = this.state;\n\n\n\n        console.log(selectedFile);\n        formData.append('inputFile', selectedFile);\n         \n        const config ={\n            headers:{\n               \" Content-Type\": \"multipart/form-data\"\n            }\n        }\n\n        const {data} = await axios.post('/api/content/video',selectedFile,config)\n    };\n\n    render() {\n        return (\n            < div >\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Upload a file: <br /><br />\n                        <input type=\"file\" name=\"file\" accept=\"video/mp4,video/x-m4v,video/*\" onChange={this.onChangeHandler} />\n                    </label>\n                    <br /><br />\n                    <button type=\"submit\">\n                        Upload\n                    </button>\n                </form >\n            </div >\n        );\n    }\n}","import React, { useEffect, useState } from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { FormControl } from 'react-bootstrap';\n\nimport UserDashboardLayout from '../components/layouts/UserDashboardLayout'\nimport './pages.css'\nimport Upload from '../components/videoCard/VideoInput';\nimport Loader from '../components/icons/Loader';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LANDING_BANNER, LOADER_GIF_IMAGE } from '../assets/icons';\nimport CropImage from '../components/cropper/CropImage';\nimport { createContent, removeMovie } from '../Redux/User/Actions/contentActions';\n\nfunction UploadVideos() {\n\n\n    const [load, setLoad] = useState(false);\n    const [title, setTitle] = useState(null);\n    const [description, setDescription] = useState(null)\n    const [video,setVideo] = useState(null)\n    const [showCropper, setShowCropper] = useState(false)\n    const [cropImage, setCropImage] = useState(false)\n    const [image, setImage] = useState(null)\n    const dispatch = useDispatch()\n\n    const { movie, movieDetails } = useSelector((state) => state.movie)\n    const { loading,contentCreated } = useSelector((state) => state.content);\n\n    useEffect(() => {\n        if (movieDetails) {\n            setTitle(movieDetails.title);\n            setDescription(movieDetails.overview);\n        }\n        if(contentCreated){\n            alert(\"successfully uploaded!\")\n        }\n    }, [movieDetails, loading,contentCreated])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (title && description ) {\n            dispatch(createContent({\n                 title,\n                 description,\n                 id:movieDetails.id,\n                 title:movieDetails.title,\n                 original_title:movieDetails.original_title,\n                 overview:movieDetails.overview,\n                 poster_path:movieDetails.poster_path,\n                 release_date:movieDetails.release_date,\n                 backdrop_path:movieDetails.backdrop_path,\n                 popularity:movieDetails.popularity,\n                 original_language:movieDetails.original_language,\n                 video:movieDetails.video,\n                 vote_average:movieDetails.vote_average,\n                 vote_count:movieDetails.vote_count,\n                 adult:movieDetails.adult,\n                 image,\n                 video,\n                }))\n            \n            // setTitle(\"\")\n            // setDescription(\"\")\n            // setImage(null)\n            // dispatch(removeMovie())  \n        } else {\n            \n            alert(\"Please fil\")\n        }\n    }\n\n    return (\n            <form onSubmit={handleSubmit} >\n                <Row>\n\n                    <Col lg={7} className=\"upload-video-main \">\n                        <div className=\"upload-video-title\" >\n                            <p className='text-uppercase text-white m-3'>upload videos</p>\n                        </div>\n                        <div className=\"upload-video-body my-3\">\n                            <div className=\"upload-video-title-input my-2 text-center\">\n                                <input type=\"text\" className=' p-2 rounded mx-auto' value={title} onChange={((e) => setTitle(e.target.value))} placeholder='Please Enter The Title Here..' required />\n                            </div>\n                            <div className=\"upload-video-description-input my-2 text-center\">\n                                <textarea type=\"text\" className=' upload-video-textarea rounded px-2' rows={10} value={description} onChange={((e) => setDescription(e.target.value))} placeholder='Please Enter The Description Here..' required />\n\n                            </div>\n\n                            {/* <Upload/> */}\n                            <div className=\"upload-buttons\">\n                                <div className=\"buttons d-flex justify-content-between  mx-5 my-3\">\n                                    <div className=\"single-button \">\n                                        <button className='  rounded text-white text-uppercase'> <Link to={'/content/select-movie'} className=\"text-white\">select movie </Link></button>\n                                    </div>\n                                    <div className=\"single-button  d-flex \">\n                                        <button className=' rounded py-auto d-flex text-white text-uppercase' type='button' onClick={(() => setLoad(!load))}>\n                                           <label htmlFor=\"upload_video\"><span className='my-auto mx-2 mx-auto' for=\"\">upload video</span></label> </button>\n                                            \n                                            <input className='d-none' type=\"file\" accept='.mp4' id='upload_video' onChange={((e)=>setVideo(e.target.files[0]))} />\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </Col>\n                    <Col lg={4} className=\"upload-video-main  text-center mx-2\">\n                        <p className='p-0 mt-3 mb-0 text-uppercase text-white'>thumbnail</p>\n                        <FormControl\n                            className=\"crop_image d-none\"\n                            id=\"upload_thumbnail\"\n                            type=\"file\"\n                            onChange={(e) => {\n                                setCropImage(e.target.files[0])\n                                setShowCropper(true)\n                            }}\n                            accept=\".jpg,.jpeg,.png,\"\n\n                        />\n                        <label for=\"upload_thumbnail\" className='my-4 shadow upload-thumbnail '  ><img src={image ? image : LANDING_BANNER} alt=\"\" width={\"100%\"} height={\"150\"} /></label>\n\n\n                       \n                        {showCropper && (\n                            <CropImage\n                                cropRatio={{ width: 1600, height: 900 }}\n                                src={cropImage}\n                                imageCallback={(image) => {\n                                    setImage(image)\n                                    setShowCropper(false)\n                                }}\n                                closeHander={() => {\n                                    setShowCropper(false)\n                                }}\n                            />\n                        )}\n                        <div className=\"thumnail rounded my-4 shadow\">\n\n                        </div>\n\n                        <div className=\"buttons text-center \">\n\n                            <div className=\"single-button  my-3\">\n                                <button type='submit' className=' rounded bg-danger text-center  mx-auto text-white text-uppercase'>upload & publish</button>\n                            </div>\n                        </div>\n                        {loading && <div className='text-center'><img width={\"60\"} src={LOADER_GIF_IMAGE}/></div>}\n                    </Col>\n                </Row>\n            </form>\n    )\n}\n\nexport default UploadVideos"],"names":["selectMovie","movieDetails","dispatch","type","CHOOSE_MOVIE_REQUEST","CHOOSE_MOVIE_SUCCESS","payload","error","CHOOSE_MOVIE_FAIL","removeMovie","REMOVE_MOVIE_REQUEST","REMOVE_MOVIE_SUCCESS","REMOVE_MOVIE_FAIL","createContent","contentDetails","CREATE_CONTENT_REQUEST","config","headers","axios","data","CREATE_CONTENT_SUCCESS","success","CREATE_CONTENT_FAIL","response","getAllContents","GET_ALL_CONTENT_REQUEST","GET_ALL_CONTENT_SUCCESS","GET_ALL_CONTENT_FAIL","likeAndDislikeContents","id","LIKE_VIDEO_REQUEST","LIKE_VIDEO_SUCCESS","LIKE_VIDEO_FAIL","getSingleContent","contentId","SINGLE_CONTENT_REQUEST","SINGLE_CONTENT_SUCCESS","content","SINGLE_CONTENT_FAIL","addComment","comment","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAIL","getPopularContents","movieId","GET_POPULAR_REVIEWS_REQUEST","GET_POPULAR_REVIEWS_SUCCESS","GET_POPULAR_REVIEWS_FAIL","getSuggestedContents","GET_SUGGEST_REVIEWS_REQUEST","GET_SUGGEST_REVEIWS_SUCCESS","contents","GET_SUGGEST_REVIEWS_FAIL","getChannelDetails","channelId","GET_CHANNEL_DETAILS_REQUEST","GET_CHANNEL_DETAILS_SUCCESS","channel","GET_CHANNEL_DETAILS_FAIL","children","useState","edit","setEdit","user","setUser","banner","avatar","channel_name","setChannel","useEffect","userData","localStorage","getItem","JSON","parse","url","className","lg","src","CHANNER_BANNER","alt","USER_AVATAR","width","style","borderRadius","onSubmit","e","preventDefault","placeholder","value","onChange","target","autoFocus","onClick","name","to","fluid","admin","React","load","setLoad","title","setTitle","description","setDescription","video","setVideo","showCropper","setShowCropper","cropImage","setCropImage","image","setImage","useDispatch","useSelector","state","movie","loading","contentCreated","overview","alert","original_title","poster_path","release_date","backdrop_path","popularity","original_language","vote_average","vote_count","adult","Row","Col","required","rows","htmlFor","for","accept","files","FormControl","LANDING_BANNER","height","CropImage","cropRatio","imageCallback","closeHander","LOADER_GIF_IMAGE"],"sourceRoot":""}